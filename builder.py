from pptx import Presentation
from pptx.util import Pt
from pptx.dml.color import RGBColor
from pptx.enum.text import MSO_AUTO_SIZE, MSO_VERTICAL_ANCHOR
import io
import re
import random
import os
from generator import get_image_for_topic

def _hex_to_rgb(hex_str):
    hex_str = hex_str.lstrip('#')
    return RGBColor(int(hex_str[0:2], 16), int(hex_str[2:4], 16), int(hex_str[4:6], 16))

def _clean_bullet(line: str):
    return re.sub(r"^(\d+[\.\)]|[-â€¢*])\s*", "", line.strip())

def create_presentation(topic, content_lines, slides, layout, font, title_color, bullet_color, uploaded_images):
    prs = Presentation()
    title_rgb = _hex_to_rgb(title_color)
    bullet_rgb = _hex_to_rgb(bullet_color)
    
    # Main Title Slide
    title_slide = prs.slides.add_slide(prs.slide_layouts[0])
    title_shape = title_slide.shapes.title; title_shape.text = topic.title()
    title_shape.text_frame.paragraphs[0].font.color.rgb = title_rgb
    title_shape.text_frame.paragraphs[0].font.name = font
    if len(title_slide.placeholders) > 1:
        title_slide.placeholders[1].text = "Generated by Slide Generator AI"

    if layout == 'titles':
        for title_text in content_lines:
            cleaned_title = _clean_bullet(title_text)
            if not cleaned_title: continue
            slide = prs.slides.add_slide(prs.slide_layouts[5])
            title_shape = slide.shapes.title
            text_frame = title_shape.text_frame
            text_frame.auto_size = MSO_AUTO_SIZE.TEXT_TO_FIT_SHAPE
            text_frame.vertical_anchor = MSO_VERTICAL_ANCHOR.TOP
            p = text_frame.paragraphs[0]
            p.text = cleaned_title
            p.font.name = font
            p.font.color.rgb = bullet_rgb
            p.font.size = Pt(36)
        
    else:
        bullets = [_clean_bullet(line) for line in content_lines if _clean_bullet(line)]
        chunks = [bullets[i:i + 5] for i in range(0, len(bullets), 5)][:slides - 1]
        citations = []
        uploaded_image_index = 0

        for chunk in chunks:
            if not chunk: continue
            
            slide_title = " ".join(chunk[0].split()[:5]).capitalize()
            layout_for_this_slide = layout
            if layout == 'mixed':
                layout_for_this_slide = random.choice(['bullet', 'two-column', 'image'])

            use_uploaded_image = uploaded_images and uploaded_image_index < len(uploaded_images)
            if use_uploaded_image and layout_for_this_slide == 'bullet':
                layout_for_this_slide = 'image'

            if layout_for_this_slide == 'image':
                slide = prs.slides.add_slide(prs.slide_layouts[3])
                slide.shapes.title.text = slide_title
                tf = slide.placeholders[1].text_frame
                tf.auto_size = MSO_AUTO_SIZE.TEXT_TO_FIT_SHAPE
                for bullet in chunk:
                    p = tf.add_paragraph(); p.text = bullet; p.font.name = font; p.font.color.rgb = bullet_rgb; p.font.size = Pt(14)

                image_to_use, credit = None, None
                if use_uploaded_image:
                    image_to_use = uploaded_images[uploaded_image_index]
                    uploaded_image_index += 1
                else:
                    image_to_use, credit = get_image_for_topic(f"{topic} {chunk[0]}")

                if image_to_use:
                    ph = slide.placeholders[2]
                    ph.element.getparent().remove(ph.element)
                    slide.shapes.add_picture(image_to_use, ph.left, ph.top, width=ph.width, height=ph.height)
                    if credit: citations.append(credit)

            elif layout_for_this_slide == 'two-column':
                slide = prs.slides.add_slide(prs.slide_layouts[3])
                slide.shapes.title.text = slide_title
                tf_left = slide.placeholders[1].text_frame
                tf_left.auto_size = MSO_AUTO_SIZE.TEXT_TO_FIT_SHAPE
                tf_right = slide.placeholders[2].text_frame
                tf_right.auto_size = MSO_AUTO_SIZE.TEXT_TO_FIT_SHAPE
                mid_point = (len(chunk) + 1) // 2
                for bullet in chunk[:mid_point]:
                    p = tf_left.add_paragraph(); p.text = bullet; p.font.name = font; p.font.color.rgb = bullet_rgb; p.font.size = Pt(14)
                for bullet in chunk[mid_point:]:
                    p = tf_right.add_paragraph(); p.text = bullet; p.font.name = font; p.font.color.rgb = bullet_rgb; p.font.size = Pt(14)
            
            else:
                slide = prs.slides.add_slide(prs.slide_layouts[1])
                slide.shapes.title.text = slide_title
                tf = slide.shapes.placeholders[1].text_frame
                tf.auto_size = MSO_AUTO_SIZE.TEXT_TO_FIT_SHAPE
                for bullet in chunk:
                    p = tf.add_paragraph(); p.text = bullet; p.font.name = font; p.font.color.rgb = bullet_rgb; p.font.size = Pt(18)
        
        if citations:
            slide = prs.slides.add_slide(prs.slide_layouts[1])
            slide.shapes.title.text = "Image References"
            tf = slide.shapes.placeholders[1].text_frame
            tf.auto_size = MSO_AUTO_SIZE.TEXT_TO_FIT_SHAPE
            for cite in citations:
                p = tf.add_paragraph(); p.text = cite; p.level = 0; p.font.size = Pt(12)
    
    # --- NEW: Save a copy to the local file system ---
    output_dir = "sample_presentations"
    os.makedirs(output_dir, exist_ok=True)
    filename = f"{topic.replace(' ', '_').lower()}.pptx"
    file_path = os.path.join(output_dir, filename)
    prs.save(file_path)
    print(f"Presentation saved locally to: {file_path}")

    # --- Existing logic to prepare for download ---
    bio = io.BytesIO()
    prs.save(bio)
    return bio